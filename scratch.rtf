{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 FiraCode-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww18360\viewh14940\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 func printJobs(jobs []JobPosting) \{\
	t := table.NewWriter()\
	t.SetOutputMirror(os.Stdout)\
	t.AppendHeader(table.Row\{"Title", "School"\})\
	for _, job := range jobs \{\
		// N.B. title, school, location, hours, salary, description, detailsUrl, closingDate\
		t.AppendRows([]table.Row\{\
			\{job.title, job.school\},\
		\})\
	\}\
	t.AppendFooter(table.Row\{"COUNT", len(jobs)\})\
	t.SetStyle(table.StyleLight)\
	t.Render()\
\
	// j1 := JobPosting\{\
	// 	"Test Job",\
	// 	"Chauncy School",\
	// 	"Ware",\
	// 	"Full time",\
	// 	"\'a340,000-\'a350,000 MPS",\
	// 	"Blah blah blah",\
	// 	"https://chauncyschool.com/job",\
	// 	"25-05-2024",\
	// \}\
	// insertJob(j1)\
\}\
\
\
	query := "DELETE FROM job;"\
	result, err := db.Exec(query)\
	if err != nil \{\
		panic(err.Error())\
	\}\
\
\
	// Get the number of rows affected\
	rowsAffected, err := result.RowsAffected()\
	if err != nil \{\
		fmt.Println("Error fetching rows affected:", err)\
		return\
	\}\
	fmt.Printf("%d row(s) affected \uc0\u10004 \u65039 \\n", rowsAffected)\
\
\
	// Insert a record into the database\
	// N.B. title, school, location, hours, salary, description, detailsUrl, closingDate\
	// query := "INSERT INTO job (title, school, location, hours, salary, description, url, closing_date) VALUES (?, ?, ?, ?, ?, ?, ?, ?)"\
	// result, err := db.Exec(query, job.title, job.school, job.location, job.hours, job.salary, job.description, job.detailsUrl, job.closingDate)\
	// if err != nil \{\
	// 	panic(err.Error())\
	// \}\
\
\
func writeTxt() \{\
	ts := time.Now().UTC().String()\
	err := os.WriteFile("tmp/test.txt", []byte("Last run:\\n"+ts), 0755)\
	if err != nil \{\
		panic(err)\
	\}\
\}\
\
\
tmpl := template.Must(template.ParseFiles(tmplFile))\
	http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) \{\
		tmpl.Execute(w, jobs)\
	\})\
	http.ListenAndServe(":80", nil)\
\
	// tmpl, err := template.New(tmplFile).ParseFiles(tmplFile)\
	// if err != nil \{\
	// 	panic(err)\
	// \}\
	// var f *os.File\
	// // f, err = os.Create("all-jobs.html")\
	// f, err = os.Create("all-jobs.txt")\
	// if err != nil \{\
	// 	panic(err)\
	// \}\
	// err = tmpl.Execute(f, jobs)\
	// if err != nil \{\
	// 	panic(err)\
	// \}\
	// err = f.Close()\
	// if err != nil \{\
	// 	panic(err)\
	// \}\
\
\
}